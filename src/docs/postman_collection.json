{
  "openapi": "3.0.0",
  "info": {
    "title": "Adventure Life REST API docs",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:9000"
    }
  ],
  "paths": {
    "/api/v1/cities": {
      "get": {
        "summary": "Returns an array of all the cities",
        "tags": ["Cities"],
        "responses": {
          "200": {
            "description": "The cities were successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CityArray"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cities were not found"
          },
          "500": {
            "description": "An error occurred"
          }
        }
      },
      "post": {
        "summary": "Create a new city",
        "tags": ["Cities"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/City"
              },
              "example": {
                "name": "Denver",
                "country": "USA"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The city was successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/City"
                }
              }
            }
          },
          "404": {
            "description": "The city was not found"
          },
          "500": {
            "description": "An error occurred"
          }
        }
      }
    },
    "/api/v1/cities/{id}": {
      "get": {
        "summary": "Get city attributes with city_id",
        "tags": ["Cities"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "number"
            },
            "required": true,
            "description": "The city id"
          }
        ],
        "responses": {
          "200": {
            "description": "The city attributes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/City"
                }
              }
            }
          },
          "404": {
            "description": "The city was not found"
          },
          "500": {
            "description": "An error occurred"
          }
        }
      },
      "patch": {
        "summary": "Update city using city_id",
        "tags": ["Cities"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "number"
            },
            "required": true,
            "description": "The city id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/City"
              },
              "example": {
                "name": "Lisbon"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The city was updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/City"
                }
              }
            }
          },
          "404": {
            "description": "The city was not found"
          },
          "500": {
            "description": "An error occurred"
          }
        }
      },
      "delete": {
        "summary": "Delete city using city_id",
        "tags": ["Cities"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "number"
            },
            "required": true,
            "description": "The city id"
          }
        ],
        "responses": {
          "200": {
            "description": "The city was deleted"
          },
          "404": {
            "description": "The city was not found"
          },
          "500": {
            "description": "An error occurred"
          }
        }
      }
    },
    "/api/v1/events": {
      "get": {
        "summary": "Returns an array of all the events. Can be filtered using a user_id or city_id in parameters",
        "tags": ["Events"],
        "parameters": [
          {
            "in": "query",
            "name": "city_id",
            "schema": {
              "type": "number"
            },
            "description": "Choose only one option- city or user filter. When included events will be filtered by the city_id."
          },
          {
            "in": "query",
            "name": "user_id",
            "schema": {
              "type": "number"
            },
            "description": "Choose only one option- city or user filter. When included events will be filtered by the user_id"
          }
        ],
        "responses": {
          "200": {
            "description": "The events were successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventArray"
                }
              }
            }
          },
          "404": {
            "description": "Events were not found"
          },
          "500": {
            "description": "An error occurred"
          }
        }
      },
      "post": {
        "summary": "Create a new event",
        "tags": ["Events"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Event"
              },
              "example": {
                "title": "The Amber Museum",
                "cityId": 3
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The event was successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "404": {
            "description": "The event was not found"
          },
          "500": {
            "description": "An error occurred"
          }
        }
      }
    },
    "/api/v1/events/{id}": {
      "get": {
        "summary": "Get event attributes with event_id",
        "tags": ["Events"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "number"
            },
            "required": true,
            "description": "The event id"
          }
        ],
        "responses": {
          "200": {
            "description": "The event attributes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "404": {
            "description": "The event was not found"
          },
          "500": {
            "description": "An error occurred"
          }
        }
      },
      "patch": {
        "summary": "Update event using event_id",
        "tags": ["Events"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "number"
            },
            "required": true,
            "description": "The event id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Event"
              },
              "example": {
                "title": "The Jade Museum"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The event was updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "404": {
            "description": "The event was not found"
          },
          "500": {
            "description": "An error occurred"
          }
        }
      },
      "delete": {
        "summary": "Delete event using event_id",
        "tags": ["Events"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "number"
            },
            "required": true,
            "description": "The event id"
          }
        ],
        "responses": {
          "200": {
            "description": "The event was deleted"
          },
          "404": {
            "description": "The event was not found"
          },
          "500": {
            "description": "An error occurred"
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "summary": "Returns an array of all the users",
        "tags": ["Users"],
        "responses": {
          "200": {
            "description": "The users were successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "$ref": "#/components/schemas/UserArray"
                }
              }
            }
          },
          "404": {
            "description": "Users were  not found"
          },
          "500": {
            "description": "An error occurred"
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "tags": ["Users"],
        "requestBody": {
          "description": "User attributes",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              },
              "example": {
                "firstName": "Sinead",
                "lastName": "Seto",
                "email": "Sinead@email.com"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user was successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "The user was not found"
          },
          "500": {
            "description": "An error occurred"
          }
        }
      }
    },
    "/api/v1/users/{id}": {
      "get": {
        "summary": "Get user attributes with user_id",
        "tags": ["Users"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "number"
            },
            "required": true,
            "description": "The user id"
          }
        ],
        "responses": {
          "200": {
            "description": "The user attributes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "The user was not found"
          },
          "500": {
            "description": "An error occurred"
          }
        }
      },
      "patch": {
        "summary": "Update user using user_id",
        "tags": ["Users"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "number"
            },
            "required": true,
            "description": "The user id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              },
              "example": {
                "lastName": "Corceda"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user was updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "The user was not found"
          },
          "500": {
            "description": "An error occurred"
          }
        }
      },
      "delete": {
        "summary": "Delete user using user_id",
        "tags": ["Users"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "number"
            },
            "required": true,
            "description": "The user id"
          }
        ],
        "responses": {
          "200": {
            "description": "The user was deleted"
          },
          "404": {
            "description": "The user was not found"
          },
          "500": {
            "description": "An error occurred"
          }
        }
      }
    },
    "/api/v1/user-cities": {
      "get": {
        "summary": "Returns an array of all the UserCities",
        "tags": ["User-Cities"],
        "responses": {
          "200": {
            "description": "The user-cities were successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserCityArray"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The user-city was not found"
          },
          "500": {
            "description": "An error occurred"
          }
        }
      },
      "post": {
        "summary": "Add a city to a user",
        "tags": ["User-Cities"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCity"
              },
              "example": {
                "userId": 3,
                "cityId": 4
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The city was successfully added to the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCity"
                }
              }
            }
          },
          "404": {
            "description": "The user and/or city was not found"
          },
          "500": {
            "description": "An error occurred"
          }
        }
      }
    },
    "/api/v1/user-cities/{id}": {
      "delete": {
        "summary": "Delete userCity using userCity_id",
        "tags": ["User-Cities"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "number"
            },
            "required": true,
            "description": "The userCity_id"
          }
        ],
        "responses": {
          "200": {
            "description": "The user-city was deleted"
          },
          "404": {
            "description": "The user-city was not found"
          },
          "500": {
            "description": "An error occurred"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "City": {
        "type": "object",
        "required": ["id", "name", "country"],
        "properties": {
          "id": {
            "type": "number",
            "description": "The auto-generated id of the city"
          },
          "name": {
            "type": "string",
            "description": "The city name"
          },
          "country": {
            "type": "string",
            "description": "The country name"
          }
        },
        "example": {
          "id": 6,
          "name": "Amsterdam",
          "country": "the Netherlands"
        }
      },
      "CityArray": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": null,
          "id": {
            "type": "number",
            "description": "The auto-generated id of the city"
          },
          "name": {
            "type": "string",
            "description": "The city name"
          },
          "country": {
            "type": "string",
            "description": "The country name"
          },
          "example": {
            "id": 6,
            "name": "Amsterdam",
            "country": "the Netherlands"
          }
        }
      },
      "Event": {
        "type": "object",
        "required": ["id", "city_id", "title"],
        "properties": {
          "id": {
            "type": "number",
            "description": "The auto-generated id of the event"
          },
          "city_id": {
            "type": "number",
            "description": "The foreign key for the city"
          },
          "title": {
            "type": "string",
            "description": "The event title"
          }
        },
        "example": {
          "id": 19,
          "city_id": 5,
          "title": "Basilica de Santa Maria de Guadalupe"
        }
      },
      "EventArray": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": null,
          "id": {
            "type": "number",
            "description": "The auto-generated id of the event"
          },
          "city_id": {
            "type": "number",
            "description": "The id of the city the event belongs to"
          },
          "title": {
            "type": "string",
            "description": "The event title"
          },
          "example": {
            "id": 19,
            "city_id": 5,
            "title": "Basilica de Santa Maria de Guadalupe"
          }
        }
      },
      "User": {
        "type": "object",
        "required": ["id", "firstName", "lastName", "email"],
        "properties": {
          "id": {
            "type": "number",
            "description": "The auto-generated id of the user"
          },
          "firstName": {
            "type": "string",
            "description": "The user's first name"
          },
          "lastName": {
            "type": "string",
            "description": "The user's last name"
          },
          "email": {
            "type": "string",
            "description": "The user's email address"
          }
        },
        "example": {
          "id": 4,
          "firstName": "Stansie",
          "lastName": "Narayan",
          "email": "Stansie@email.com"
        }
      },
      "UserArray": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": null,
          "id": {
            "type": "number",
            "description": "The auto-generated id of the user"
          },
          "firstName": {
            "type": "string",
            "description": "The user's first name"
          },
          "lastName": {
            "type": "string",
            "description": "The user's last name"
          },
          "email": {
            "type": "string",
            "description": "The user's email address"
          },
          "example": {
            "id": 4,
            "firstName": "Stansie",
            "lastName": "Narayan",
            "email": "Stansie@email.com"
          }
        }
      },
      "UserCity": {
        "type": "object",
        "required": ["id", "user_id", "city_id"],
        "properties": {
          "id": {
            "type": "number",
            "description": "The auto-generated id of the user"
          },
          "user_id": {
            "type": "string",
            "description": "User id to add the city to"
          },
          "city_id": {
            "type": "number",
            "description": "City id to add to the user"
          }
        },
        "example": {
          "id": 4,
          "city_id": 2,
          "user_id": 3
        }
      },
      "UserCityArray": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": null,
          "id": {
            "type": "number",
            "description": "The auto-generated id of the city"
          },
          "user_id": {
            "type": "number",
            "description": "The user id"
          },
          "city_id": {
            "type": "number",
            "description": "The city id"
          },
          "example": {
            "id": 78,
            "user_id": 10,
            "city_id": 2
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Cities",
      "description": "Adventure Life Cities"
    },
    {
      "name": "Events",
      "description": "Adventure Life Events"
    },
    {
      "name": "Users",
      "description": "Adventure Life Users"
    },
    {
      "name": "User-Cities",
      "description": "Adventure Life User Cities"
    }
  ]
}
